# -----------------------
# Kong configuration file
# -----------------------
#
# The commented-out settings shown in this file represent the default values.
#
# This file is read when `kong start` or `kong prepare` are used. Kong
# generates the Nginx configuration with the settings specified in this file.
#
# All environment variables prefixed with `KONG_` and capitalized will override
# the settings specified in this file.
# Example:
#   `log_level` setting -> `KONG_LOG_LEVEL` env variable
#
# Boolean values can be specified as `on`/`off` or `true`/`false`.
# Lists must be specified as comma-separated strings.
#
# All comments in this file can be removed safely, including the
# commented-out properties.
# You can verify the integrity of your settings with `kong check <conf>`.

#------------------------------------------------------------------------------
# GENERAL
#------------------------------------------------------------------------------

prefix = /usr/local/kong/
# Working directory. Equivalent to Nginx's prefix path, containing temporary files and logs.
# Each Kong process must have a separate working directory.

log_level = info
# Log level of the Nginx server.
# Logs are found at `<prefix>/logs/error.log`.
# See http://nginx.org/en/docs/ngx_core_module.html#error_log for a list of accepted values.

proxy_access_log = logs/access.log
# Path for proxy port request access logs.
# Set this value to `off` to disable logging proxy requests.
# If this value is a relative path, it will be placed under the `prefix` location.

proxy_error_log = logs/error.log
# Path for proxy port request error logs.
# The granularity of these logs is adjusted by the `log_level` property.

admin_access_log = logs/admin_access.log
# Path for Admin API request access logs.
# Set this value to `off` to disable logging Admin API requests.
# If this value is a relative path, it will be placed under the `prefix` location.

admin_error_log = logs/error.log
# Path for Admin API request error logs.
# The granularity of these logs is adjusted by the `log_level` property.

plugins = bundled, decision-maker
# Comma-separated list of plugins this node should load.
# By default, only plugins bundled in official distributions are loaded via the `bundled` keyword.
#
# Loading a plugin does not enable it by default, but only instructs Kong to load its source code,
# and allows to configure the plugin via the various related Admin API endpoints.
#
# The specified name(s) will be substituted as such in the Lua namespace:
# `kong.plugins.{name}.*`.
#
# When the `off` keyword is specified as the only value, no plugins will be loaded.
#
# `bundled` and plugin names can be mixed together, as the following examples suggest:
#
# - `plugins = bundled,custom-auth,custom-log`
#   will include the bundled plugins plus two custom ones
# - `plugins = custom-auth,custom-log` will
#   *only* include the `custom-auth` and `custom-log` plugins.
# - `plugins = off` will not include any plugins
#
# **Note:** Kong will not start if some plugins were previously configured (i.e.
# have rows in the database) and are not specified in this list.  Before disabling a
# plugin, ensure all instances of it are removed before restarting Kong.
#
# **Note:** Limiting the amount of available plugins can improve P99 latency
# when experiencing LRU churning in the database cache (i.e. when the configured `mem_cache_size`) is full.

anonymous_reports = on
# Send anonymous usage data such as error stack traces to help improve Kong.


#------------------------------------------------------------------------------
# NGINX PROXY
#------------------------------------------------------------------------------

proxy_listen = 0.0.0.0:443 ssl http2, [::]:443 ssl http2
# Comma-separated list of addresses and ports on which the proxy server should listen for HTTP/HTTPS traffic.
# The proxy server is the public entry point of Kong, which proxies traffic from your consumers to your backend services.
# This value accepts IPv4, IPv6, and hostnames.
#
# Some suffixes can be specified for each pair:
#
# - `ssl` will require that all connections made through a particular address/port be made with TLS enabled.
# - `http2` will allow for clients to open HTTP/2 connections to Kong's proxy server.
# - `proxy_protocol` will enable usage of the PROXY protocol for a given address/port.
# - `transparent` will cause kong to listen to, and respond from,
#    any and all IP addresses and ports you configure in iptables.
#
# This value can be set to `off`, thus disabling the HTTP/HTTPS proxy port for this node.
# If stream_listen is also set to `off`, this enables 'control-plane' mode for this node
# (in which all traffic proxying capabilities are disabled). This node can then be used only to
# configure a cluster of Kong nodes connected to the same datastore.
#
# Example:
# `proxy_listen = 0.0.0.0:443 ssl, 0.0.0.0:444 http2 ssl`
#
# See http://nginx.org/en/docs/http/ngx_http_core_module.html#listen
# for a description of the accepted formats for this and other `*_listen` values.
#
# See https://www.nginx.com/resources/admin-guide/proxy-protocol/
# for more details about the `proxy_protocol` parameter.
#
# Not all `*_listen` values accept all formats
# specified in nginx's documentation.

ssl_cipher_suite = custom
# Defines the TLS ciphers served by Nginx. Accepted values are `modern`, `intermediate`, `old`, or `custom`.
#
# See https://wiki.mozilla.org/Security/Server_Side_TLS for detailed descriptions of each cipher suite.

ssl_ciphers = ALL:!EXP:!NULL:!ADH:!LOW:!SSLv2:!SSLv3:!MD5:!RC4
# Defines a custom list of TLS ciphers to be served by Nginx.
# This list must conform to the pattern defined by `openssl ciphers`.
# This value is ignored if `ssl_cipher_suite` is not `custom`.

#ssl_cert =
# The absolute path to the SSL certificate for `proxy_listen` values with SSL enabled.

#ssl_cert_key =
# The absolute path to the SSL key for `proxy_listen` values with SSL enabled.

headers = off
# Comma-separated list of headers Kong should inject in client responses.
#
# Accepted values are:
# - `Server`: Injects `Server: kong/x.y.z` on Kong-produced response
# (e.g. Admin API, rejected requests from auth plugin, etc...).
# - `Via`: Injects `Via: kong/x.y.z` for successfully proxied requests.
# - `X-Kong-Proxy-Latency`: Time taken (in milliseconds) by Kong to process a request
#   and run all plugins before proxying the request upstream.
# - `X-Kong-Upstream-Latency`: Time taken (in milliseconds) by the upstream service to send response headers.
# - `X-Kong-Upstream-Status`: The HTTP status code returned by the upstream service.
#   This is particularly useful for clients to distinguish upstream statuses if the response is rewritten by a plugin.
# - `server_tokens`: Same as specifying both `Server` and `Via`.
# - `latency_tokens`: Same as specifying both `X-Kong-Proxy-Latency` and `X-Kong-Upstream-Latency`.
#
# In addition to those, this value can be set to `off`, which prevents Kong from injecting
# any of the above headers. Note that this does not prevent plugins from injecting headers of their own.
#
# Example: `headers = via, latency_tokens`

real_ip_header = X-Real-IP
# Defines trusted IP addresses blocks that are known to send correct `X-Forwarded-*` headers.
# Requests from trusted IPs make Kong forward their `X-Forwarded-*` headers upstream.
# Non-trusted requests make Kong insert its own `X-Forwarded-*` headers.
#
# This property also sets the `set_real_ip_from` directive(s) in the Nginx configuration.
# It accepts the same type of values (CIDR blocks) but as a comma-separated list.
#
# To trust *all* /!\ IPs, set this value to `0.0.0.0/0,::/0`.
#
# If the special value `unix:` is specified, all UNIX-domain sockets will be trusted.
#
# See http://nginx.org/en/docs/http/ngx_http_realip_module.html#set_real_ip_from for examples of accepted values.
#trusted_ips =

# Defines the request header field whose value will be used to replace the client address.
# This value sets the `ngx_http_realip_module` directive of the same name in the Nginx configuration.
#
# If this value receives `proxy_protocol`:
#
# - at least one of the `proxy_listen` entries must have the `proxy_protocol` flag enabled.
# - the `proxy_protocol` parameter will be appended to the `listen` directive of the Nginx template.
#
# See http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_header for a description of this directive.

real_ip_recursive = off
# This value sets the `ngx_http_realip_module` directive of the same name in the Nginx configuration.
#
# See http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_recursive for a description of this directive.

upstream_keepalive = 60
# Sets the maximum number of idle keepalive connections to upstream servers that are
# preserved in the cache of each worker process. When this number is exceeded,
# the least recently used connections are closed.
# A value of `0` will disable this behavior altogether, forcing each upstream request to open a new connection.

client_max_body_size = 0
# Defines the maximum request body size allowed by requests proxied by Kong,
# specified in the Content-Length request header.
# If a request exceeds this limit, Kong will respond with a 413 (Request Entity Too Large).
# Setting this value to 0 disables checking the request body size.
#
# See http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
# for further description of this parameter. Numeric values may be suffixed
# with `k` or `m` to denote limits in terms of kilobytes or megabytes.

client_body_buffer_size = 8k
# Defines the buffer size for reading the request body.
# If the client request body is larger than this value, the body will be buffered to disk.
# Note that when the body is buffered to disk Kong plugins that access
# or manipulate the request body may not work, so it is advisable to set this value as high as possible
# (e.g., set it as high as `client_max_body_size` to force request bodies to be kept in memory).
# Do note that high-concurrency environments will require significant memory allocations to process
# many concurrent large request bodies.
#
# See http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size
# for further description of this parameter. Numeric values may be suffixed
# with `k` or `m` to denote limits in terms of kilobytes or megabytes.

error_default_type = text/plain
# Default MIME type to use when the request `Accept` header is missing and Nginx
# is returning an error for the request.
# Accepted values are `text/plain`, `text/html`, `application/json`, and `application/xml`.


#------------------------------------------------------------------------------
# NGINX ADMIN APIs
#------------------------------------------------------------------------------

admin_listen = 127.0.0.1:8001, 127.0.0.1:8444 ssl
# Comma-separated list of addresses and ports on which the Admin interface should listen.
# The Admin interface is the API allowing you to configure and manage Kong.
# Access to this interface should be *restricted* to Kong administrators *only*.
# This value accepts IPv4, IPv6, and hostnames.
#
# Some suffixes can be specified for each pair:
#
# - `ssl` will require that all connections made through a particular address/port be made with TLS enabled.
# - `http2` will allow for clients to open HTTP/2 connections to Kong's proxy server.
# - Finally, `proxy_protocol` will enable usage of the PROXY protocol for a given address/port.
#
# This value can be set to `off`, thus disabling the Admin interface for this node,
# enabling a 'data-plane' mode (without configuration capabilities)
# pulling its configuration changes from the database.
#
# Example: `admin_listen = 127.0.0.1:8444 http2 ssl`

#admin_ssl_cert =
# The absolute path to the SSL certificate for `admin_listen` values with SSL enabled.

#admin_ssl_cert_key =
# The absolute path to the SSL key for `admin_listen` values with SSL enabled.

